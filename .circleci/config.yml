version: 2.1

# Commands are snippets of configuration we can re-use
commands:
  copy_built_files:
    description: "Copy the build site files so we can build the HTML"
    steps:
      # Grab the the built markdown from the last step
      - run:
          name: Copy over built site files
          command: |
            rm -rf content/_build
            cp -r /tmp/workspace/content/_build .

# Jobs define the actual code that CircleCI runs
jobs:
  build_page_files:
    docker:
      - image: mtmiller/octave
    steps:
      # Get our data and merge with upstream
      - checkout

      # Install the packages needed to build our documentation
      # This will depend on your particular package!
      - run: pip3 install -r requirements.txt

      # Build the page intermediate HTML files and copy all images to the build directory
      - run:
          name: Build page intermediate HTML files
          command: |
            cd content
            jupyter-book build -W -n --keep-going .
            find . -name '*images*' -not -path "*_build*" -exec cp --recursive --parents --verbose \{\} _build/html \;

      # Persist the specified paths (see https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs)
      - persist_to_workspace:
          root: .
          paths:
            - ./content/_build/

  # Build the site to store artifacts
  html_demo:
    docker:
      - image: circleci/python:3.6-stretch
    steps:
      - checkout

      # Attach the workspace that contains the files from our Python step
      - attach_workspace:
          at: /tmp/workspace

      # Copy over the built page files
      - copy_built_files


      # Tell Circle to store the documentation output in a folder we can access later
      - store_artifacts:
          path: _build/html
          destination: html

  # Finally, push the HTML to the gh-pages branch
  html_live:
    docker:
      - image: circleci/python:3.6-stretch
    steps:
      - checkout

      # Attach the workspace that contains the files from our Python step
      - attach_workspace:
          at: /tmp/workspace

      # Copy over the built page files
      - copy_built_files

      # Install the ghp-import tool which we'll use to push the files
      - run:
          name: "Install ghp-import"
          command: pip install -U ghp-import

      # Tell CircleCI to use the SSH key we've set up with permissions to push to our repo
      - add_ssh_keys:
          fingerprints:
            # The SSH key fingerprint
            - "46:04:53:ea:61:05:73:c9:0e:74:12:f0:ed:2a:5b:b6"

      # Push the `_site` folder to our gh-pages branch for it to go live
      - run:
          name: Push site to gh-pages
          command: ghp-import -m "[skip ci] Update Site" -p -n -f _build/html


# These workflows define how the jobs above will run. In our case, we
# want the Ruby jobs to run *after* the Python job has finished so that
# they can use the outputs from the Python page build step.
workflows:
  version: 2
  default:
    jobs:
      # First we build the pages
      - build_page_files

      # Then we build the book HTML to preview
      - html_demo:
          requires:
            - build_page_files

      # If we're on master branch, also push the HTML live
      - html_live:
          requires:
            - build_page_files
          filters:
            branches:
              only:
                - master
